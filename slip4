#Q1 Write a Python program to plot 2D graph of the functions f(x) = log10(x) in the [0,10]
import numpy as np 
import matplotlib.pyplot as plt 
x = np.linspace(1,10) 
y = np.log10(x)
plt.plot(x, y) 
plt.xlabel('x') 
plt.ylabel('f(x) = log10(x)') 
plt.title('2D Graph of f(x) = log10(x)') 
plt.grid(True) 
plt.show()

#Q2  # Using Python plot the graph of function f(x) = sin−1(x) on the interval [−1,1]
import numpy as np 
import matplotlib.pyplot as plt 
x = np.linspace(-1,1) 
y = 1/np.sin(x) 
plt.plot(x, y) 
plt.xlabel('x') 
plt.ylabel('f(x) = sin-1(X)') 
plt.title('2D Graph of f(x) = log10(x)') 
plt.grid(True) 
plt.show()


#Q3 if the line with points A[3,1],B[5,−1] is transformed by the transformation matrix [T] =[3 −2  2 1]
 # then using python, find the equation of transformed line.
 import numpy as np 
A = np.array([3, 1]) 
B = np.array([5, -1]) 
T = np.array([[3, -2], [2, 1]]) 
A_transformed = np.dot(T, A) 
B_transformed = np.dot(T, B) 
x1_transformed, y1_transformed = A_transformed 
x2_transformed, y2_transformed = B_transformed 
m_transformed = (y2_transformed - y1_transformed) / (x2_transformed - x1_transformed) 
b_transformed = y1_transformed - m_transformed * x1_transformed 
equation_transformed = f'y = {m_transformed} * x + {b_transformed}' 
print("Equation of transformed line: ", equation_transformed)


 #Q4 Using python, generate line passing through points (2,3) and (4,3) and fi nd equation of the line
 import matplotlib.pyplot as plt 
import numpy as np 
x = np.array([2, 4]) 
y = np.array([3, 3]) 
m = (y[1] - y[0]) / (x[1] - x[0]) 
b = y[0] - m * x[0] 
print(f"The equation of the line is: y = {m : .2f}x + {b:.2f}") 
plt.scatter(x, y, c='blue', label='Points') 
plt.plot(x, m * x + b, c='red', label='Line') 
plt.xlabel('X') 
plt.ylabel('Y') 
plt.title('Line Passing through Points') 
plt.legend() 
plt.show()

#Q5  # Write a Python program to solve the following LPP:
 # Max Z = 150x + 75y
 # subject to 4x + 6y ≤24
 #            5x + 3y ≤15
 #            x ≥0,y ≥0.
from pulp import * 
problem = LpProblem("LPP", LpMaximize) 
x = LpVariable('x', lowBound=0, cat='Continuous') 
y = LpVariable('y', lowBound=0, cat='Continuous')  
Z=150 * x + 75 * y
 problem += Z 
problem += 4 * x + 6 * y <= 24  
problem += 5 * x + 3 * y <= 15   
problem.solve() 
print("Status:", LpStatus[problem.status])  
print("Optimal x =", value(x)) 
print("Optimal y =", value(y)) 
print("Optimal Z =", value(problem.objective))

#Q6  # Find the combined transformation of the line segment between the points A[4,−1] & B[3,0]
 # by using Python program for the following sequence of transformations:
 # (I) Shearing in X direction by 9 units.
 # (II) Rotation about origin through an angle π.
 # (III) Scaling in X− coordinate by 2 units.
 # (IV) Reflection through the line y = x.
 import numpy as np 
A = np.array([4, -1]) 
B = np.array([3, 0]) 
shear_matrix = np.array([[1, 9], [0, 1]]) 
A_sheared = np.dot(shear_matrix, A) 
B_sheared = np.dot(shear_matrix, B) 
print("Transformed Point A after Shearing:", A_sheared) 
print("Transformed Point B after Shearing:", B_sheared) 
rotation_matrix = np.array([[np.cos(np.pi), -np.sin(np.pi)], 
[np.sin(np.pi), np.cos(np.pi)]]) 
A_rotated = np.dot(rotation_matrix, A_sheared) 
B_rotated = np.dot(rotation_matrix, B_sheared) 
print("Transformed Point A after Rotation:", A_rotated) 
print("Transformed Point B after Rotation:", B_rotated) 
scaling_matrix = np.array([[2, 0],[0, 1]]) 
A_scaled = np.dot(scaling_matrix, A_rotated) 
B_scaled = np.dot(scaling_matrix, B_rotated) 
print("Transformed Point A after Scaling:", A_scaled) 
print("Transformed Point B after Scaling:", B_scaled) 
reflection_matrix = np.array([[0, 1], [1, 0]]) 
A_reflected = np.dot(reflection_matrix, A_scaled) 
B_reflected = np.dot(reflection_matrix, B_scaled) 
print("Transformed Point A after Reflection:", A_reflected) 
print("Transformed Point B after Reflection:", B_reflected)
