#Q1  Using python, generate 3D surface Plot for the function f(x) = sin (x2 + y2)in the interval [0,10]
import numpy as np 
import matplotlib.pyplot as plt 
from mpl_toolkits.mplot3d import Axes3D 
def func(x, y): 
return np.sin(x**2 + y**2) 
x = np.linspace(0, 10, 100) 
y = np.linspace(0, 10, 100) 
X, Y = np.meshgrid(x, y) 
Z = func(X, Y)   
fig = plt.figure() 
ax = fig.add_subplot(111, projection='3d') 
ax.plot_surface(X, Y, Z)  
ax.set_xlabel('X') 
ax.set_ylabel('Y') 
ax.set_zlabel('Z') 
ax.set_title('Surface Plot of f(x) = sin(x**2 + y**2)') 
plt.show()


#Q2 Draw the horizontal bar graph for the following data in Maroon colour.
 # City              Pune Mumbai Nasik Nagpur Thane
 # Air Quality Index 168   190   170   178     195
import matplotlib.pyplot as plt 
left = [1, 2, 3, 4, 5] 
height = [168, 190, 170, 178, 195] 
tick_label = ['Pune', 'Mumbai', 'Nasik', 'Nagpur', 'Thane'] 
plt.barh(left, height, tick_label=tick_label, color='red') 
plt.xlabel('Air Quality Index') 
plt.ylabel('City') 
plt.title('Air Quality Index by City (Horizontal Bar Graph)')
plt.show()


#Q3 using python, rotate the line segment by 180◦ having end points (1,0) and (2,−1).
import numpy as np 
import matplotlib.pyplot as plt 
x1, y1 = 1, 0 
x2, y2 = 2, -1 
plt.plot([x1, x2], [y1, y2], 'bo-', label='Original Line') 
x1_rot, y1_rot = -x1, -y1 
x2_rot, y2_rot = -x2, -y2 
plt.xlim(-3, 3) 
plt.ylim(-3, 3) 
plt.legend() 
plt.plot([x1_rot, x2_rot], [y1_rot, y2_rot], 'ro-', label='Rotated Line') 
plt.xlabel('X') 
plt.ylabel('Y') 
plt.title('Rotation of Line Segment by 180 degrees') 
plt.show()

#Q4 Write a Python program to draw a polygon with vertices (0,0),(2,0),(2,3) and (1,6) and rotate it by 180◦
 import numpy as np
 import matplotlib.pyplot as plt
 vertices = np.array([[0, 0], [2, 0], [2, 3], [1, 6],[0,0]])
 plt.figure()
 plt.plot(vertices[:, 0], vertices[:, 1], 'red') 
 plt.title('Original Polygon')
 plt.xlabel('X') 
 plt.ylabel('Y')
 rotation_matrix = np.array([[np.cos(np.pi), -np.sin(np.pi)], [np.sin(np.pi), np.cos(np.pi)]])
 rotated_vertices = np.dot(vertices, rotation_matrix)
 plt.figure()
 plt.plot(rotated_vertices[:, 0], rotated_vertices[:, 1], 'black')
 plt.title('Rotated Polygon (180 degrees)')
 plt.xlabel('X') 
 plt.ylabel('Y')
 plt.show()


# Q5 Write a Python program to solve the following LPP:
 # Max Z = x + y
 # subject to 2x −2y ≥1
 # x + y ≥2
 # x ≥0,y ≥0
 from pulp import * 
problem = LpProblem("LPP", LpMaximize) 
x = LpVariable('x', lowBound=0, cat='Continuous') 
y = LpVariable('y', lowBound=0, cat='Continuous') 
Z= x + y
problem += Z 
problem +=  2*x - 2*y >= 1
problem +=  x +  y >= 2 
problem.solve()
print("Status:", LpStatus[problem.status])
print("Optimal x =", value(x)) 
print("Optimal y =", value(y)) 
print("Optimal Z =", value(problem.objective))

#Q6 Apply Python program in each of the following transformations on the point P[4,−2]
 # (I) Refection through Y−axis.
 # (II) Scaling in X−coordinate by factor 7.
 # (III) Shearing in Y direction by 3 units
 # (IV) Reflection through the line y = −x.
 import numpy as np
 P = [4, -2]  
reflection_y_axis = np.array([-1, 1]) * P
scaling_x = np.array([7, 1]) * P 
shearing_y = [P[0], P[1] + (3 * P[0])]
reflection_line = np.array([-P[1],-P[0]]) 
print("Original point P:", P) 
print("Reflection through y-axis:", reflection_y_axis) 
print("Scaling in X-coordinates by factor 7:", scaling_x) 
print("Shearing in Y-direction by 3 units: ",shearing_y) 
print("Reflection through the line y = -x:", reflection_line)
