#Q1 Write the Python program to find area of the triangle ABC, where A[0,0],B[5,0],C[3,3]
import math 
def calculate_area(x1, y1, x2, y2, x3, y3): 
area = abs((x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)) / 2) 
return area 
Ax, Ay = 0, 0 
Bx, By = 5, 0 
Cx, Cy = 3, 3 
area = calculate_area(Ax, Ay, Bx, By, Cx, Cy) 
print("Area of triangle ABC is:", area)

 #Q2 Write the Python program to plot the graph of the function, using def()
 # f(x) = x2 + 4        if −10 ≤x < 5
 #        3x + 9        if 5 ≤x < 10
import numpy as np 
import matplotlib.pyplot as plt 
def f(x): 
if -10 < x < 5: 
return x**2 + 4 
elif 5 <= x: 
return 3*x + 9 
else: 
return None 
 x = np.linspace(-11, 11, 500)   
y = np.array([f(xi) for xi in x]) 
plt.plot(x, y, label='f(x)') 
plt.xlabel('x') 
plt.ylabel('f(x)') 
plt.title('Graph of f(x)') 
plt.legend() 
plt.grid(True) 
plt.show()


#Q3 Write the Python program to rotate the triangle ABC by 180 degree, where A[1,2],B[2,−2] & C[−1,2]
 import numpy as np 
A = np.array([1,2]) 
B = np.array([2, -2]) 
C = np.array([-1, 2]) 
angle = np.radians(180) 
rotation_matrix = np.array([[np.cos(angle), -np.sin(angle)], [np.sin(angle), np.cos(angle)]]) 
A_rotated = np.dot(rotation_matrix, A) 
B_rotated = np.dot(rotation_matrix, B) 
C_rotated = np.dot(rotation_matrix, C) 
print("Original Triangle Vertices:") 
print("A:", A) 
print("B:", B) 
print("C:", C) 
print("Rotated Triangle Vertices:") 
print("A Rotated:", A_rotated) 
print("B Rotated:", B_rotated) 
print("C Rotated:", C_rotated)


#Q4 Write the Python program to plot the graph of function f(x) = ex in the interval [−10,10].
import numpy as np 
import matplotlib.pyplot as plt 
def f(x): 
return np.exp(x) 
x = np.linspace(-10, 10, 500) 
y = f(x) 
plt.plot(x, y, label='f(x) = e**x') 
plt.xlabel('x') 
plt.ylabel('f(x)') 
plt.title('Graph of f(x) = e**x') 
plt.legend() 
plt.grid(True) 
plt.show()


 #Q5 Write a Python program to solve the following LPP:
 # Min Z = 3.5x + 2y
 # subject to x + y ≥5
 # x ≥4
 # y ≤2
 # x ≥0,y ≥0.
from pulp import * 
problem= LpProblem("Minimize Z", LpMinimize) 
x= LpVariable("x", lowBound=0, cat='Continuous') 
y= LpVariable("y", lowBound=0, cat='Continuous') 
Z = 3.5 * x + 2 * y 
problem+= Z 
problem+= x + y >= 5
problem+= x >= 4 
problem+= y <= 2 
problem.solve() 
print("Status:", LpStatus[problem.status])
print("x =", value(x)) 
print("y =", value(y)) 
print("Optimal value of Z =",value(problem.objective))


 #Q6 write a Python program to apply each of the following transformations on the point P[−2,4].
 # I. Reflection through the line y = x + 1.
 # II. Scaling in Y -coordinate by factor 1.5.
 # III. Shearing in X direction by 2 units.
 # IV. Rotation about origin by an angle 45 degrees.
 import numpy as np
 P=np.array([-2,4])
print("Original Point:") 
print("Point P: ({}, {})".format(P[0], P[1])) 
reflection_matrix = np.array([[0, 1], [1,0]])                         
P_reflection = np.dot(reflection_matrix, P) 
print("\nPoint after Reflection:") 
print("Point P: ({}, {})".format(P_reflection[0], P_reflection[1]))
scaling_matrix = np.array([[1, 0], [0, 1.5]])                   
P_scaling = np.dot(scaling_matrix, P_reflection) 
print("\nPoint after Scaling:") 
print("Point P: ({}, {})".format(P_scaling[0], P_scaling[1]))
shearing_matrix= np.array([[1, 2], [0,1]])                             
P_shearing = np.dot(shearing_matrix, P_scaling)  
print("\nPoint after Shearing:") 
print("Point P: ({}, {})".format(P_shearing[0], P_shearing[1])
rotation_matrix = np.array([[np.cos(np.pi/4), -np.sin(np.pi/4)], [np.sin(np.pi/4), np.cos(np.pi/4)]]) 
P_rotation = np.dot(rotation_matrix, P_shearing) 
print("\nPoint after Rotation:") 
print("Point P: ({}, {})".format(P_rotation[0], P_rotation[1]))
