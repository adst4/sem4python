#Q1 Write a python program to plot the graphs of sin(x),ex and x3 in [0,5] in one figure with 2 ×2 subplots
 import numpy as np
 import matplotlib.pyplot as plt
 x = np.linspace(0, 5, 100)
 y1 = np.sin(x)
 y2 = np.exp(x)
 y3 = x**3
 plt.figure(figsize=(10, 8))
 plt.subplot(2, 2, 1)
 plt.plot(x, y1, 'r')
 plt.title('sin(x)')
 plt.subplot(2, 2, 2)
 plt.plot(x, y2, 'g')
 plt.title('exp(x)')
 plt.subplot(2, 2, 3)
 plt.plot(x, y3, 'b')
 plt.title('x^3')
 plt.tight_layout()
 plt.show()


 #Q2 Write a python program to plot 2D graph of the functions f(x) = log(x) + 5 and g(x) = log(x) −5 in [0,10] by setting 
 #different line width and different colors to the curve
 import numpy as np 
 import matplotlib.pyplot as plt 
 def f(x): 
 return np.log(x) + 5 
 def g(x): 
 return np.log(x) - 5
x = np.linspace(0.01, 10, 100) 
y_f = f(x) 
y_g = g(x) 
plt.plot(x, y_f, label='f(x) = log(x) + 5', linewidth=2, color='blue') 
plt.plot(x, y_g, label='g(x) = log(x) - 5', linewidth=1, color='red') 
plt.xlabel('x') 
plt.ylabel('y') 
plt.legend() 
plt.title('2D Graph of f(x) and g(x)') 
plt.show()


#Q3 Write a python program to rotate the ray by 90o in clockwise direction having starting point (0,0) and end point (4,4).
 import math 
x1, y1 = 0, 0 
x2, y2 = 4, 4 
x1_rotated = -x1 
y1_rotated = -y1 
x2_rotated = -x2 
y2_rotated = -y2 
print("Original Endpoint 1: ({}, {})".format(x1, y1)) 
print("Original Endpoint 2: ({}, {})".format(x2, y2)) 
print("Rotated Endpoint 1: ({}, {})".format(x1_rotated, y1_rotated)) 
print("Rotated Endpoint 2: ({}, {})".format(x2_rotated, y2_rotated))


#Q4 Write a Python program to Reflect the triangle ABC through the line y=3, where A[1,0],B[2,−1] and C[−1,3]
 import numpy as np
 import matplotlib.pyplot as plt
 A = np.array([1, 0])
 B = np.array([2, -1])
 C = np.array([-1, 3])
 line = 3
 A_reflected = np.array([A[0], 2 * line - A[1]])
 B_reflected = np.array([B[0], 2 * line - B[1]])
 C_reflected = np.array([C[0], 2 * line - C[1]])
 plt.plot([A[0], B[0], C[0], A[0]], [A[1], B[1], C[1], A[1]], 'b-', label='Triangle ABC')
 plt.plot([A_reflected[0], B_reflected[0], C_reflected[0], A_reflected[0]], 
 [A_reflected[1], B_reflected[1], C_reflected[1], A_reflected[1]], 'r-', label='Reflected Triangle')
 plt.axhline(y=line, color='g', linestyle='--', label='Reflection Line y=3')
 plt.xlabel('X')
 plt.ylabel('Y')
 plt.title('Reflection of Triangle ABC through the line y=3')
 plt.legend()
 plt.grid(True)
 plt.show()


#Q5 Write a Python program to solve the following LPP:
 # Max Z = 3x + 5y + 4z
 # subject to 2x + 3y ≤8
 # 2y + 5z ≤10
 # 3x + 2y + 4z ≤15
 # x ≥0,y ≥0
 from pulp import * 
prob = LpProblem("Minimize Z", LpMaximize)  
x = LpVariable('x', lowBound=0, cat='Continuous') 
y = LpVariable('y', lowBound=0, cat='Continuous') 
z = LpVariable('z', lowBound=0, cat='Continuous')
Z= 3*x + 5*y + 4*z
 prob += Z
prob += 2*x + 3*y <= 8
 prob += 2*y + 5*z <= 10 
prob += 3*x + 2*y + 4*z <= 15 
prob.solve() 
print("Status: ", LpStatus[prob.status]) 
print("Optimal Values:") 
print("x = ", x.varValue) 
print("y = ", y.varValue) 
print("z = ", z.varValue) 
print("Optimal Objective Function Value = ", value(prob.objective))


 #Q6 Find combined transformation of the line segment between the points A[4,−1] and B[3,0] for
 # the following sequence of transformations:
 # First rotation about origin through an angle πc; followed by scaling in x coordinate by 3 units;
 # followed by reflection through the line y = x.
 A = np.array([4, -1]) 
 B = np.array([3, 0]) 
angle = np.pi 
 rotation_matrix = np.array([[np.cos(angle), -np.si(angle)], [np.sin(angle), 
 np.cos(angle)]]) 
 rotated_A = np.dot(rotation_matrix, A) 
 rotated_B = np.dot(rotation_matrix, B) 
scaling_factor = np.array([[3, 0], [0, 1]]) 
scaled_A = np.dot(scaling_factor, rotated_A) 
scaled_B = np.dot(scaling_factor, rotated_B) 
reflection_matrix = np.array([[0, 1], [1, 0]]) 
reflected_A = np.dot(reflection_matrix, scaled_A) 
reflected_B = np.dot(reflection_matrix, scaled_B) 
print("Initial Points A and B:") 
print("A =", A) 
print("B =", B) 
print("Combined Transformed Points A and B:") 
print("A' =", reflected_A) 
print("B' =", reflected_B)
