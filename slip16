#Q1  Write a Python program to plot graph of the function f(x,y) = –x2 −y2 when −10 ≤x,y ≤10.
import matplotlib.pyplot as plt 
import numpy as np 
def f(x, y): 
return -x**2 - y**2 
x = np.linspace(-10, 10, 100) 
y = np.linspace(-10, 10, 100) 
X, Y = np.meshgrid(x, y) 
Z = f(X, Y) 
fig = plt.figure() 
ax = fig.add_subplot(111, projection='3d') 
ax.plot_surface(X, Y, Z, cmap='viridis') 
ax.set_xlabel('X') 
ax.set_ylabel('Y') 
ax.set_zlabel('f(x, y)') 
ax.set_title('Graph of f(x, y) = -x**2 - y**2') 
plt.show()


#Q2  Write a Python program to generate plot of the function f(x) = x2, in the interval [−5,5], in figure of size 6 ×6 inches
import matplotlib.pyplot as plt 
import numpy as np 
def f(x): 
return x**2 
x = np.linspace(-5, 5, 100) 
y = f(x) 
fig = plt.figure(figsize=(6, 6)) 
plt.plot(x, y, label='f(x) = x^2') 
plt.xlabel('x') 
plt.ylabel('f(x)') 
plt.title('Graph of f(x) = x^2') 
plt.legend() 
plt.show()


 #Q3  Write a Python program to draw a polygon with vertices (0,0),(2,0),(2,3) and (1,6) and rotate it by 90
 import matplotlib.pyplot as plt 
import numpy as np 
vertices = np.array([[0, 0], [2, 0], [2, 3], [1, 6], [0, 0]]) 
plt.plot(vertices[:, 0], vertices[:, 1], label='Original Polygon') 
rotation_angle = 90 
theta = np.radians(rotation_angle) 
rotation_matrix = np.array([[np.cos(theta), -np.sin(theta)],[np.sin(theta), np.cos(theta)]])    
rotated_vertices = np.dot(vertices, rotation_matrix.T) 
plt.plot(rotated_vertices[:, 0], rotated_vertices[:, 1], label='Rotated Polygon') 
plt.axis('equal')  
plt.legend() 
plt.title('Polygon Rotation') 
plt.show()


#Q4 Write a Python program to Generate vector x in the interval [0,15] using numpy package with 100 subintervals
import numpy as np 
start = 0 
end = 15 
num_subintervals = 100 
x = np.linspace(start, end, num=num_subintervals+1) 
print("Generated vector x:") 
print(x)

#Q5 Write a Python program to solve the following LPP:
 # Min Z = 3.5x + 2y
 # subject to x + y ≥5
 # x ≥4
 # y ≤2
 # x ≥0,y ≥0.
from pulp import * 
problem= LpProblem("Minimize Z", LpMinimize) 
x= LpVariable("x", lowBound=0, cat='Continuous') 
y= LpVariable("y", lowBound=0, cat='Continuous') 
Z = 3.5 * x + 2 * y 
problem+= Z 
problem+= x + y >= 5
 problem+= x >= 4 
problem+= y <= 2 
problem.solve() 
print("Status:", LpStatus[problem.status])
 print("x =", value(x)) 
print("y =", value(y)) 
print("Optimal value of Z =",value(problem.objective))



#Q6 Write a python program to plot the Triangle with vertices at [4,3],[6,3],[6,5]. 
#and its reflec-tions through, 1) x-axis, 2) y-axis. All the figures must be in different colors, also plot the two axes
import matplotlib.pyplot as plt 
import numpy as np 
triangle_vertices = np.array([[4, 3], [6, 3], [6, 5], [4, 3]]) 
x_reflected_vertices = np.array([triangle_vertices[:, 0], -triangle_vertices[:, 1]]).T 
y_reflected_vertices = np.array([-triangle_vertices[:, 0], triangle_vertices[:, 1]]).T 
plt.plot(triangle_vertices[:, 0], triangle_vertices[:, 1], 'r', label='OriginalTriangle') 
plt.plot(x_reflected_vertices[:, 0], x_reflected_vertices[:, 1], 'b', label='X-Reflected Triangle') 
plt.plot(y_reflected_vertices[:, 0], y_reflected_vertices[:, 1], 'g', label='Y-Reflected Triangle') 
plt.xlabel('X-axis') 
plt.ylabel('Y-axis') 
plt.title('Triangle and Its Reflections') 
plt.legend() 
plt.show()
