#Q1 Plot the graph of f(x) = x4 in [0,5] with red dashed line with circle markers.
import numpy as np 
import matplotlib.pyplot as plt 
def f(x): 
return x**4 
x = np.linspace(0, 5,100) 
y = f(x) 
plt.plot(x, y, 'r--o', markersize=6) 
plt.xlabel('x') 
plt.ylabel('f(x)') 
plt.title('Graph of f(x) = x**4') 
plt.show()


# Q2 Using python, generate 3D surface Plot for the function f(x) = sin (x2 + y2)in the interval [0,10]
import numpy as np 
import matplotlib.pyplot as plt 
from mpl_toolkits.mplot3d import Axes3D 
def func(x, y): 
return np.sin(x**2 + y**2) 
x = np.linspace(0, 10, 100) 
y = np.linspace(0, 10, 100) 
X, Y = np.meshgrid(x, y) 
Z = func(X, Y)  
fig = plt.figure() 
ax = fig.add_subplot(111, projection='3d') 
ax.plot_surface(X, Y, Z)  
ax.set_xlabel('X') 
ax.set_ylabel('Y') 
ax.set_zlabel('Z') 
ax.set_title('Surface Plot of f(x) = sin(x**2 + y**2)') 
plt.show()


#Q3 Write a Python program to reflect the line segment joining the points A [5,3] & B[1,4] through the line y = x + 1
import matplotlib.pyplot as plt 
import numpy as np 
A = np.array([5, 3]) 
B = np.array([1, 4]) 
reflection_line = lambda x: x + 1
plt.plot([A[0], B[0]], [A[1], B[1]], '-o', label='Original Line Segment AB') 
x_vals = np.linspace(-5, 5, 100) # Generate x values for the plot 
plt.plot(x_vals, reflection_line(x_vals), '-r', label='Reflection Line y = x + 1')  
reflected_A = np.array([reflection_line(A[0]),  A[0]]) 
reflected_B = np.array([reflection_line(B[0]),  B[0]])
plt.plot([reflected_A[0],  reflected_B[0]],  [reflected_A[1],  reflected_B[1]],  '-o', label='Reflected Line Segment A\'B\'') 
plt.xlabel('x') 
plt.ylabel('y') 
plt.title('Line Segment Reflection') 
plt.legend()  
plt.show()


#4 Using sympy declare the points P(5,2),Q(5,−2),R(5,0), check whether these points are collinear.
# Declare the ray passing through the points P and Q, find the length of this ray between P and Q.Also find slope of this ray.
from sympy import Point, Line 
P = Point(5, 2) 
Q = Point(5, -2) 
R = Point(5, 0) 
line_PQ = Line(P, Q) 
line_PR = Line(P, R) 
collinear = line_PQ.is_parallel(line_PR) 
if collinear: 
print("Points P, Q, and R are collinear") 
else: 
print("Points P, Q, and R are not collinear") 
length_PQ = P.distance(Q) 
slope_PQ = (Q.y - P.y) / (Q.x - P.x) 
print("Length of the ray PQ:", length_PQ) 
print("Slope of the ray PQ:", slope_PQ)

# Q5 Write a Python program to solve the following LPP:
 # Min Z = 3.5x + 2y
 # subject to x + y ≥5
 #            x ≥4
 #            y ≤2
 # x ≥0,y ≥0
from pulp import * 
problem= LpProblem("Minimize Z", LpMinimize) 
x= LpVariable("x", lowBound=0, cat='Continuous') 
y= LpVariable("y", lowBound=0, cat='Continuous') 
Z = 3.5 * x + 2 * y problem+= Z 
problem+= x + y >= 5
problem+= x >= 4 
problem+= y <= 2 
problem.solve()
print("Status:", LpStatus[problem.status])  
print("x =", value(x)) 
print("y =", value(y)) 
print("Optimal value of Z =",value(problem.objective))


# Apply Python program in each of the following transformations on the point P[4,−2]
 # (I) Refection through Y−axis.
 # (II) Scaling in X−coordinate by factor 5.
 # (III) Rotation about origin through an angle π/2 .
 # (IV) Shearing in X direction by 7 / 2 units
 import numpy as np
 P=np.array([4,-2])
 reflection_y_axis = np.array([-1, 1]) * P 
 scaling_x = np.array([5, 1]) * P
 shearing_x = [P[0]+((7/2)*P[1]),P[1]] 
rotation_matrix = np.array([[np.cos(np.pi/2), -np.sin(np.pi/2)], 
[np.sin(np.pi/2), np.cos(np.pi/2)]]) 
P_rotation = np.dot(rotation_matrix, P)
print("Original point P:", P) 
print("Reflection through y-axis:", reflection_y_axis) 
print("Scaling in X-coordinates by factor 3:", scaling_x) 
print("Rotation about origin through an angle of 30 degree:",P_rotation)
print("Shearing in x-direction by 7/2 units: ",shearing_x)
