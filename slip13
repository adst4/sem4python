 #Q1  Write a Python program to plot 2D graph of the functions f(x) = x2 and g(x) = x3 in [−1,1]
 import matplotlib.pyplot as plt
 import numpy as np
 def f(x):
    return x**2
 def g(x):
    return x**3
 x=np.linspace(-1,1,100)
 y_f=f(x)
 y_g=g(x)
 fig,ax=plt.subplots()
 ax.plot(x,y_f,label='f(x)=x^2')
 ax.plot(x,y_g,label='g(x)=x^3')
 ax.set_xlabel('x')
 ax.set_ylabel('y')
 ax.legend()
 ax.set_title('2D graph of f(x)=x^2 and g(x)=x^3')
 plt.show()


 #Q2 Using Python, plot the surface plot of parabola z = x2 + y2 in −6 < x,y < 6.
import numpy as np 
import matplotlib.pyplot as plt 
from mpl_toolkits.mplot3d import Axes3D 
x = np.linspace(-6, 6, 100) 
y = np.linspace(-6, 6, 100) 
X, Y = np.meshgrid(x, y)
Z = X**2 + Y**2 
fig = plt.figure() 
ax = fig.add_subplot(111, projection='3d') 
surf = ax.plot_surface(X, Y, Z, cmap='viridis') 
ax.set_xlabel('X') 
ax.set_ylabel('Y') 
ax.set_zlabel('Z') 
ax.set_title('Surface Plot of z = x**2 + y**2') 
plt.show()



#Q3 Using sympy declare the points P(5,2),Q(5,−2),R(5,0), check whether these points are collinear.
 # Declare the ray passing through the points P and Q, find the length of this ray between P and Q. Also find slope of this ray
 from sympy import * 
P = Point(5, 2) 
Q = Point(5, -2) 
R = Point(5, 0) 
collinear = Point.is_collinear(P, Q, R) 
if collinear: 
print("Points P, Q, and R are collinear.") 
else: 
print("Points P, Q, and R are not collinear.") 
ray_PQ = Ray(P, Q) 
length_PQ = ray_PQ.length 
print("Length of ray PQ between points P and Q:", length_PQ) 
slope_PQ = ray_PQ.slope 
print("Slope of ray PQ:", slope_PQ)



#Q4  Find the area and perimeter of the ∆ABC, where A[0,0],B[5,0],C[3,3].
import numpy as np 
A = np.array([0, 0]) 
B = np.array([5, 0]) 
C = np.array([3, 3]) 
AB = np.linalg.norm(B - A) 
BC = np.linalg.norm(C - B) 
CA = np.linalg.norm(A - C) 
s = (AB + BC + CA) / 2 
area = np.sqrt(s * (s - AB) * (s - BC) * (s - CA)) 
perimeter = AB + BC + CA 
print("Triangle ABC:") 
print("Side AB:", AB) 
print("Side BC:", BC) 
print("Side CA:", CA) 
print("Area:", area) 
print("Perimeter:", perimeter)

 #Q5  Write a Python program to solve the following LPP:
 # Max Z = 5x + 3y
 # subject to x + y ≤7
 # 2x + 5y ≤1
 # x ≥0,y ≥0
 from pulp import * 
problem = LpProblem("LPP", LpMaximize) 
x = LpVariable('x', lowBound=0, cat='Continuous') 
y = LpVariable('y', lowBound=0, cat='Continuous') 
Z=5 * x + 3 * y
 problem += Z 
problem +=  x +  y <= 7 
problem += 2 * x + 5 * y <= 1  
problem.solve() 
print("Status:", LpStatus[problem.status]) 
print("Optimal x =", value(x)) 
print("Optimal y =", value(y))  
print("Optimal Z =", value(problem.objective))


 #Q6 Write a python program to apply the following transformations on the point (−2,4) :
 # (I) Shearing in Y direction by 7 units.
 # (II) Scaling in X and Y direction by 7/2 and 7 units respectively.
 # (III) Shearing in X and Y direction by 4 and 7 units respectively.
 # (IV) Rotation about origin by an angle 60◦
 import numpy as np
 P=np.array([-2,4])
 shearing_y1 = [P[0], P[1] + (7 * P[0])]
 P_scaled = np.array([P[0] * 7/2, P[1] * 7])
 P_sheared = np.array([P[0] + (4 * P[1]), P[1] + (7 * P[0])])
 rotation_matrix = np.array([[np.cos(np.pi/3), -np.sin(np.pi/3)], [np.sin(np.pi/3), np.cos(np.pi/3)]]) 
 P_rotation = np.dot(rotation_matrix, P)
 print("Original point P:", P)
 print("Shearing in Y direction:", shearing_y1) 
 print("Scaling in X and Y direction by 7/2 and 7",P_scaled) 
 print("Shearing in X and Y direction by 4 and 7 units:",P_sheared) 
 print("Rotation about origin through an angle of 60 degree:",P_rotation)
