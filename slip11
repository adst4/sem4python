#Q1 Plot the graph of y = e−x2 in [−5,5] with red dashed-points line with Upward Pointing triangle
import matplotlib.pyplot as plt 
import numpy as np 
x = np.linspace(-5, 5, 100) 
y = np.exp(-x) 
fig, ax = plt.subplots() 
ax.plot(x, y, 'r--', marker='^') 
ax.set_xlabel('x') 
ax.set_ylabel('y') 
ax.set_title('Graph of y = e**-x') 
plt.show()

#Q2 Draw a bar graph in GREEN colour to represent the data below:
 # Subject                 Maths Science English Marathi Hindi
 # Percentage of passing   68      90     70      85      91
import matplotlib.pyplot as plt  
left = [1,2,3,4,5] 
height = [68,90,70,85,91] 
tick_label=['Maths','Science','English','Marathi','Hindi'] 
plt.bar (left,height,tick_label = tick_label,width = 0.8 ,color = ['green','green']) 
plt.xlabel('Subject') 
plt.ylabel('Percentage of passing') 
plt. show()


 #Q3 Write a python program to rotate the ∆ABC by 90◦ where A(1,2),B(2,−2),C(−1,2)
 import numpy as np 
A = np.array([1, 2]) 
B = np.array([2, -2]) 
C = np.array([-1, 2]) 
angle = np.radians(90) 
rotation_matrix = np.array([[np.cos(angle), -np.sin(angle)], 
[np.sin(angle), np.cos(angle)]]) 
A_rotated = np.dot(rotation_matrix, A) 
B_rotated = np.dot(rotation_matrix, B) 
C_rotated = np.dot(rotation_matrix, C) 
print("Rotated Point A: ", A_rotated) 
print("Rotated Point B: ", B_rotated) 
print("Rotated Point C: ", C_rotated)



 #Q4 Write a python program to reflect the ∆ABC through the line y = 3 where A(1,0),B(2,−1),C(−1,3)
 import numpy as np 
reflection_line = 3 
A = np.array([1, 0]) 
B = np.array([2, -2]) 
C = np.array([-1, 2]) 
Ap = np.array([A[0], 2 * reflection_line - A[1]]) 
Bp = np.array([B[0], 2 * reflection_line - B[1]]) 
Cp = np.array([C[0], 2 * reflection_line - C[1]]) 
print("Original Points:") 
print("A: ", A) 
print("B: ", B) 
print("C: ", C) 
print("Reflected Points:") 
print("A':", Ap) 
print("B':", Bp) 
print("C':", Cp)

#Q5 Solve LPP by using python:
 # Min Z = x + y
 # subject to x ≥6
 # y ≥6
 # x + y ≥11
 # x ≥0,y ≥0
 from pulp import * 
problem= LpProblem("Minimize Z", LpMinimize) 
x= LpVariable("x", lowBound=0, cat='Continuous') 
y= LpVariable("y", lowBound=0, cat='Continuous') 
Z =  x +  y
 problem+= Z
 problem+= x >= 6
 problem+= y >= 6
 problem+= x + y >=11
 problem.solve() 
print("Status:", LpStatus[problem.status])
 print("x =", value(x)) 
print("y =", value(y)) 
print("Optimal value of Z =",value(problem.objective)


#Q6 Write a python program to apply the following transformations on the point (−2,4) :
 # (I) Shearing in Y direction by 7 units.
 # (II) Scaling in X and Y direction by 3/2 and 4 units respectively.
 # (III) Shearing in X and Y direction by 2 and 4 units respectively.
 # (IV) Rotation about origin by an angle 45◦
 import numpy as np
 P=np.array([-2,4])
 shearing_y1 = [P[0], P[1] + (7 * P[0])]
 P_scaled = np.array([P[0] * 3/2, P[1] * 4])
 P_sheared = np.array([P[0] + (2 * P[1]), P[1] + (4 * P[0])])
 rotation_matrix = np.array([[np.cos(np.pi/4), -np.sin(np.pi/4)],[np.sin(np.pi/4), np.cos(np.pi/4)]]) 
 P_rotation = np.dot(rotation_matrix, P)
 print("Original point P:", P)
 print("Shearing in Y direction by 7 unit:", shearing_y1)
 print("Scaling in X and Y direction by 3/2 and 4:",P_scaled)
 print("Shearing in X and Y direction by 2 and 4 units:",P_sheared)
 print("Rotation about origin through an angle of 45 degree:",P_rotation)
