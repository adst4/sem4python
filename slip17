 #Q1 Write python program to plot the 3D graph of the function z = x2 + y2 in −6 < x,y <6 using surface plot
import matplotlib.pyplot as plt 
import numpy as np 
x = np.linspace(-6, 6, 100) 
y = np.linspace(-6, 6, 100) 
X, Y = np.meshgrid(x, y) 
Z = X**2 + Y**2 
fig = plt.figure() 
ax = fig.add_subplot(111, projection='3d') 
ax.plot_surface(X, Y, Z, cmap='viridis') 
ax.set_xlabel('X-axis') 
ax.set_ylabel('Y-axis') 
ax.set_zlabel('Z-axis') 
ax.set_title('3D Surface Plot of z = x^2 + y^2')
plt.show()


#Q2 Write a python program to plot 3D contours for the function f(x,y) = log(x2y2) when −5 ≤x,y ≤5, with greens color map.
import matplotlib.pyplot as plt 
import numpy as np 
x = np.linspace(-5, 5, 100) 
y = np.linspace(-5, 5, 100) 
X, Y = np.meshgrid(x, y) 
Z = np.log(X**2 * Y**2) 
fig = plt.figure() 
ax = fig.add_subplot(111, projection='3d') 
ax.contour(X, Y, Z, cmap='Greens') 
ax.set_xlabel('X-axis') 
ax.set_ylabel('Y-axis') 
ax.set_zlabel('f(x, y)') 
ax.set_title('3D Contour Plot of f(x, y) = log(x^2 * y^2)')  
plt.show()

 #Q3 Write a python program to rotate the line segment by 180 degrees having end points (1,0) and (2,−1).
import matplotlib.pyplot as plt 
import numpy as np 
A = np.array([1, 0]) 
B = np.array([2, -1]) 
midpoint = (A + B) / 2 
rotation_matrix = np.array([[-1, 0],[0, -1]])                          
A_rotated = np.dot(rotation_matrix, A - midpoint) + midpoint 
B_rotated = np.dot(rotation_matrix, B - midpoint) + midpoint 
fig, ax = plt.subplots() 
ax.plot([A[0], B[0]], [A[1], B[1]], 'b', label='Original Line Segment AB') 
ax.plot([A_rotated[0], B_rotated[0]], [A_rotated[1], B_rotated[1]], 'r', label='Rotated Line Segment A\'B\'') 
ax.scatter(midpoint[0],  midpoint[1],  color='g',  marker='o',  label='Midpoint')
ax.legend() 
ax.set_xlabel('X-axis') 
ax.set_ylabel('Y-axis') 
ax.set_title('Rotation of Line Segment AB by 180 Degrees around Midpoint') 
plt.axis('equal')  
plt.grid(True) 
plt.show()


 #Q4  Write a python program to drawn a polygon with vertices (0,0),(1,0),(2,2),(1,4) and find its area and perimeter.
 import matplotlib.pyplot as plt 
import numpy as np 
vertices = np.array([[0, 0], [1, 0], [2, 2], [1, 4], [0, 0]])  
x = vertices[:, 0] 
y = vertices[:, 1] 
fig, ax = plt.subplots() 
ax.plot(x, y, 'b', label='Polygon')  
area = 0.5 * np.abs(np.dot(x, np.roll(y, 1)) - np.dot(y, np.roll(x, 1))) 
perimeter = np.sum(np.sqrt(np.diff(x) ** 2 + np.diff(y) ** 2)) 
print("Area of the polygon: ", area) 
print("Perimeter of the polygon: ", perimeter) 
ax.set_xlabel('X-axis') 
ax.set_ylabel('Y-axis') 
ax.set_title('Polygon with Vertices (0, 0), (1, 0), (2, 2), (1, 4)') 
ax.legend() 
plt.grid(True) 
plt.show()


#Q5 Write a Python program to solve the following LPP:
 # Max Z =  4x + y + 3z + 5w
 # subject to  4x + 6y −5z −4w ≥−20
 #            −8x −3y + 3z + 2w ≤20
 # x ≥0,y ≥0.
 from pulp import * 
lp_problem = LpProblem("Minimize Z", LpMaximize) 
x = LpVariable('x', lowBound=0, cat='Continuous') 
y = LpVariable('y', lowBound=0, cat='Continuous') 
z = LpVariable('z', lowBound=0, cat='Continuous') 
w = LpVariable('w', lowBound=0, cat='Continuous') 
Z= 4*x + y + 3*z + 5*w
 lp_problem += Z
lp_problem += 4*x + 6*y - 5*z - 4*w >= -20 
lp_problem += -8*x - 3*y + 3*z + 2*w <= 5 
lp_problem += x >= 0 
lp_problem += y >= 0 
lp_problem.solve() 
print("Status: ", LpStatus[lp_problem.status]) 
print("Optimal Values:") 
print("x = ", x.varValue) 
print("y = ", y.varValue) 
print("z = ", z.varValue) 
print("w = ", w.varValue) 
print("Optimal Objective Function Value = ", value(lp_problem.objective))


 #Q6 Apply each of the following transformations on the point P[3,−1].
 # I. Reflection through X-axis.
 # II. Scaling in Y-coordinate by factor 1.5.
 # III. Shearing in both X and Y direction by -2 and 4 units respectively.
 # IV. Rotation about origin by an angle 30 degrees
 import numpy as np 
 P = np.array([2, -3]) 
reflection_X = np.array([[1, 0],[0, -1]])                         
P_reflection_X = np.dot(reflection_X, P)
scaling_Y = np.array([[1, 0],[0, 1.5]]) 
P_scaling_Y = np.dot(scaling_Y, P) 
P_sheared = np.array([P[0] + (-2 * P[1]), P[1] + (4 * P[0])])
angle = np.radians(30) 
rotation = np.array([[np.cos(angle), -np.sin(angle)],[np.sin(angle), np.cos(angle)]])                     
P_rotation = np.dot(rotation, P) 
print("Original Point P:", P) 
print("Result after reflection through X-axis:", P_reflection_X) 
print("Result after scaling in Y-coordinate by factor 1.5:", P_scaling_Y) 
print("Result  after  shearing  in  both  X  and  Y  direction  by  -2  and 4  units respectively:", P_sheared) 
print("Result after rotation about origin by an angle of 30 degrees:", P_rotation)
